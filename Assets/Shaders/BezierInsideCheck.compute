#pragma kernel CSMain

struct BezierSegment
{
    float2 p0, p1, p2; 
};

StructuredBuffer<BezierSegment> bezierSegments;
StructuredBuffer<float2> points;
RWStructuredBuffer<int> results; 
float2 scale; 

// Løser en bezier kurn. bruker denne fordi det ikke er en lerp funksjon i hlsl som jeg fant
float2 BezierPoint(float2 p0, float2 p1, float2 p2, float2 p3, float t)
{
    // u blir brukt for å gjøre neste linje litt mer kompakt
    float u = 1.0 - t;
    // dette er den vanlige formelen for en Kubisk Bézier kurv 
    // B(t) = (1 - t)^3 * p0
    //      + 3 * (1 - t)^2 * t * p1
    //      + 3 * (1 - t) * t^2 * p2
    //      + t^3 * p3
    return u * u * u * p0 +
           3.0 * u * u * t * p1 +
           3.0 * u * t * t * p2 +
           t * t * t * p3;
}

// sjekker om en punkt ligger på kanten av fromen
// dette gjør den ved å skyte en ray høyre fra testPoint
bool EdgeIntersectsRay(float2 a, float2 b, float2 testPoint)
{
    // sjekker at a og b er på forskjellige sider, hvis de ikke er er det umulig at punktene testPoint ligger linjen som a og b lager
    if ((a.y > testPoint.y) == (b.y > testPoint.y)) return false; 
    // sjekker hvor på x aksen den eventuelt krysser
    float xIntersection = a.x + (b.x - a.x) * (testPoint.y - a.y) / (b.y - a.y);
    // hvis den krysser x aksen på høyre side bettyr det at den krysset formen
    return xIntersection > testPoint.x; 
}

[numthreads(256, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // noen ganger må vi dispatche flere threads en det er punkt.
    if (id.x >= points.Length) return; 

    float2 testPoint = points[id.x]; 
    int crossings = 0;

    // loop gjennom alle segmentene og test tell hvor mange ganger en ray krysser formen
    for (int i = 0; i < bezierSegments.Length - 1; i++) 
    {
        BezierSegment seg = bezierSegments[i];
        float2 next_p0 = bezierSegments[i + 1].p0; 

        
        float2 p0 = seg.p0 * scale;
        float2 p1 = seg.p1 * scale;
        float2 p2 = seg.p2 * scale;
        float2 p3 = next_p0 * scale;

        float2 prev = p0;
        const int resolution = 10; 

        for (int j = 1; j <= resolution; j++)
        {
            float t = j / (float)resolution;
            float2 curr = BezierPoint(p0, p1, p2, p3, t);

            if (EdgeIntersectsRay(prev, curr, testPoint))
            {
                crossings++;
            }

            prev = curr;
        }
    }

    // sett testpunktet til 1 hvis det er i formen og 0 hvis den er utenfor
    results[id.x] = (crossings % 2 == 1) ? 1 : 0;
}
